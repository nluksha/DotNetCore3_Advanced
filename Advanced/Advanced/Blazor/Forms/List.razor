@page "/forms"
@page "/forms/list"
@layout EmptyLayout

<h5 class="bg-primary text-white text-center p-2">People</h5>

<table class="table table-sm table-striped table-bordered">
    <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Dept</th>
            <th>Location</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (People.Count() == 0)
        {
            <tr>
                <th colspan="5" class="p-4 text-center ">Loading Data...</th>
            </tr>
        }
        else
        {
            @foreach (var p in People)
            {
                <tr>
                    <td>@p.PersonId</td>
                    <td>@p.Surname, @p.Firstname</td>
                    <td>@p.Department.Name</td>
                    <td>@p.Location.City</td>
                    <td>
                        <NavLink class="btn btn-sm btn-warning" href="@GetEditUrl(p.PersonId)">Edit</NavLink>
                    </td>
                </tr>

            }
        }
    </tbody>
</table>

<button class="btn btn-danger" @onclick="UpdateData">Update</button>

<button class="btn btn-primary" @onclick="@(() => Counter++)">Increment</button>
<span class="h5">Counter: @Counter</span>

@code {
        [Inject]
        public DataContext Context { get; set; }

    public IEnumerable<Person> People { get; set; } = Enumerable.Empty<Person>();

    public int Counter { get; set; } = 0;

    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
    }

    private async Task UpdateData()
    {
        People = await Context.People.Include(p => p.Department).Include(p => p.Location).ToListAsync<Person>();
    }

    public string GetEditUrl(long id) => $"/forms/edit/{id}";
}
